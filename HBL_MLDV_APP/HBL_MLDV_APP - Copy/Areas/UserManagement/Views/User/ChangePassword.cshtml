@model HBL_MLDV_APP.Areas.UserManagement.Models.ChangePassword
@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}@section PageStyles{
    

    <style>
        .col-sm-2 {
            margin: 0px;
            padding: 0px;
        }
    </style>
}
<h2>Change User Password</h2>
<div class="row">
    <div class="col-xs-12">
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title"><b>@ViewBag.username</b></h3>
                <div class="box-tools pull-right">
                </div><!-- /.box-tools -->
            </div><!-- /.box-header -->
            <div class="box-body">
                <div class="row">

                    <div class="col-sm-offset-1 col-md-8">

                        @using (Html.BeginForm(actionName: "ChangePassword", controllerName: "User"))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(x => x.userid)
                            @Html.HiddenFor(x => x.username)
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true)
                                <div class="row form-group">
                                    <div class="col-sm-12 col-md-2">
                                        @Html.LabelFor(x => x.OldPassword, new { @class = "control-label", @for = "OldPassword" })
                                    </div>
                                    <div class="col-sm-12 col-md-9">
                                        @Html.TextBoxFor(x => x.OldPassword, new { @class = "form-control", @autocomplete = "false", @type = "password" })
                                        @Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row form-group">
                                    <div class="col-sm-12 col-md-2">
                                        @Html.LabelFor(x => x.NewPassword, new { @class = "control-label", @for = "NewPassword" })
                                    </div>
                                    <div class="col-sm-12 col-md-9">
                                        @Html.TextBoxFor(x => x.NewPassword, new { @class = "form-control keyup-numeric", @autocomplete = "false", @type = "password", @maxlength = "20" })
                                        @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                                        <div id="diverrornew"></div>
                                    </div>
                                </div>

                                <div class="row form-group">
                                    <div class="col-sm-12 col-md-2">
                                        @Html.LabelFor(x => x.ConfirmPassword, new { @class = "control-label", @for = "ConfirmPassword" })
                                    </div>
                                    <div class="col-sm-12 col-md-9">
                                        @Html.TextBoxFor(x => x.ConfirmPassword, new { @class = "form-control", @autocomplete = "false", @type = "password", @maxlength = "20" })
                                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                        <div id="diverrorcnfm"></div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <div class="control-group row">
                                            <div id="insert_update_btn" class="controls col-sm-12">
                                                <button type="button" onclick="verify()" class="saveBtn btn btn-primary pull-right"><i class="fa fa-save"></i> Save</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section PageScripts{
    @Scripts.Render("~/bundles/jqueryval")
@{
    if (TempData["Notify"] != null)
    {
        <script>Notify("@TempData["NotifyType"].ToString()", "@TempData["Notify"].ToString()");</script>
    }
}
    <script>
        $(document).ready(function () {
            $('#OldPassword').val('');
            $('#NewPassword').val('');
            $('#ConfirmPassword').val('');
        });
        var IsvalidRegix = false;
    function verify() {
        if ($('#NewPassword').val() != $('#ConfirmPassword').val()) {
            Notify('error', 'New Password and Confirm Password does not match')
            return;
        }
        else {
            if ($("form").valid()) {
                if (IsvalidRegix == true) {
                    $("form").submit();
                }
                else {
                    $('#NewPassword').focus();
                }
            }
        }
    }
    $('.keyup-numeric').keyup(function () {
        debugger;
        var inputVal = $(this).val();
        $("#diverrornew").html(ValidatePaswordregix(inputVal));
        //else if ($(this).attr('id') == "ConfirmPassword") {
        //    $("#diverrorcnfm").html(ValidatePaswordregix(inputVal));
        //}
    });

    function ValidatePaswordregix(inputVal) {
        var html = "<ul style='list-style:none;'>";
        //==================Upper Case=======================
        //^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*()_+{}[]|/<>,.?]).{8,20}$/
        var UpperCase = /(?=.*[A-Z])/;
        if (!UpperCase.test(inputVal)) {
            html += '<li><span style="padding-right:5px;" class="text-danger"><i class="fa fa-remove"></i></span>At least one Upper case letter</li>';
            IsvalidRegix = false;
        }
        else {
            html += '<li><span style="padding-right:5px;" class="text-success"><i class="fa fa-check"></i></span>At least one Upper case letter</li>';
            IsvalidRegix = true;
        }
        //====================LowerCase================================
        var LowerCase = /(?=.*[a-z])/;
        if (!LowerCase.test(inputVal)) {
            html += '<li><span style="padding-right:5px;" class="text-danger"><i class="fa fa-remove"></i></span>At least one lower case letter</li>';
            IsvalidRegix = false;
        }
        else {
            html += '<li><span style="padding-right:5px;" class="text-success"><i class="fa fa-check"></i></span>At least one lower case letter</li>';
            IsvalidRegix = true;
        }
        //====================numeric================================
        var numeric = /(?=.*\d)/;
        if (!numeric.test(inputVal)) {
            html += '<li><span style="padding-right:5px;" class="text-danger"><i class="fa fa-remove"></i></span>At least one numeric digit</li>';
            IsvalidRegix = false;
        }
        else {
            html += '<li><span style="padding-right:5px;" class="text-success"><i class="fa fa-check"></i></span>At least one numeric digit</li>';
            IsvalidRegix = true;
        }
        //====================special Character================================
        var special = /(?=.*[\W])/;
        if (!special.test(inputVal)) {
            html += '<li><span style="padding-right:5px;" class="text-danger"><i class="fa fa-remove"></i></span>At least one special character</li>';
            IsvalidRegix = false;
        }
        else {
            html += '<li><span style="padding-right:5px;" class="text-success"><i class="fa fa-check"></i></span>At least one special character</li>';
            IsvalidRegix = true;
        }
        //==================Minimun 8=======================
        if (inputVal.length < 8) {
            html += '<li><span style="padding-right:5px;" class="text-danger"><i class="fa fa-remove"></i></span>Password must be at least 8 characters</li>';
            IsvalidRegix = false;
        }
        else {
            html += '<li><span style="padding-right:5px;" class="text-success"><i class="fa fa-check"></i></span>Password must be at least 8 characters</li>';
            IsvalidRegix = true;
        }
        //=======================================================
        html += "</ul>";
        return html;
    }
    </script>


}